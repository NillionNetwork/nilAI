name: CD

# Only run on pushes to main (you can also add tags or workflow_dispatch if you like)
on:
  push:
    branches: ["main"]
  release:
    types: [published]

jobs:
  # 1. Run your Python unit and lint tests
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync

      - name: Run Ruff format check
        run: uv run ruff format --check

      - name: Run Ruff linting
        run: uv run ruff check --exclude packages/verifier/

      - name: Run tests
        run: uv run pytest -v tests/unit

      - name: pyright
        run: uv run pyright

  # 2. Spin up an EC2 runner for your E2E jobs
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-24.04
    needs: test
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instances-ids: ${{ steps.start-ec2-runner.outputs.ec2-instances-ids }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_KEY }}
          aws-region: "eu-west-1"
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: NillionNetwork/ec2-github-runner@v2.2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          runners-per-machine: 1
          number-of-machines: 1
          ec2-image-id: ami-0174a246556e8750b
          ec2-instance-type: g4dn.xlarge
          subnet-id: subnet-0ec4c353621eabae2
          security-group-id: sg-03ee5c56e1f467aa0
          key-name: production-github-runner-key
          iam-role-name: github-runners-production-github-runner-ec2
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "github-runner-${{ github.run_id }}-${{ github.run_number }}"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "KeyName", "Value": "github-runners-key"},
              {"Key": "Deployment", "Value": "github-runners"},
              {"Key": "Type", "Value": "GithubRunner"},
              {"Key": "User", "Value": "ec2-user"},
              {"Key": "Environment", "Value": "production"}
            ]

  # 3. Run your end-to-end tests on that runner
  e2e-tests:
    name: E2E Tests
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      - name: Install dependencies
        run: |
          apt-get update && apt-get install curl git pkg-config automake file python3.12-dev -y
          uv sync

      - name: Build vllm
        run: docker build -t nillion/nilai-vllm:latest -f docker/vllm.Dockerfile .

      - name: Build attestation
        run: docker build -t nillion/nilai-attestation:latest -f docker/attestation.Dockerfile .

      - name: Build nilai API
        run: docker build -t nillion/nilai-api:latest -f docker/api.Dockerfile --target nilai --platform linux/amd64 .

      - name: Create .env
        run: |
          cp .env.ci .env
          sed -i 's/HF_TOKEN=.*/HF_TOKEN=${{ secrets.HF_TOKEN }}/' .env

      - name: Start Services
        run: |
          docker-compose -f docker-compose.yml \
            -f docker-compose.dev.yml \
            -f docker-compose.prod.yml \
            -f docker/compose/docker-compose.llama-1b-gpu.ci.yml up -d
          docker ps -a

      - name: Wait for services to be healthy
        run: bash scripts/wait_for_ci_services.sh

      - name: Run E2E tests for NUC
        run: |
          export ENVIRONMENT=ci
          uv run pytest -v tests/e2e

      - name: Run E2E tests for API Key
        run: |
          export AUTH_TOKEN=$(docker exec nilai-api uv run src/nilai_api/commands/add_user.py --name test1 --ratelimit-minute 1000 --ratelimit-hour 1000 --ratelimit-day 1000 | jq -r ".apikey")
          export ENVIRONMENT=ci
          export AUTH_STRATEGY=api_key
          uv run pytest -v tests/e2e

      - name: Stop Services
        run: |
          docker-compose -f docker-compose.yml \
            -f docker-compose.dev.yml \
            -f docker-compose.prod.yml \
            -f docker/compose/docker-compose.llama-1b-gpu.ci.yml down -v

  # 4. Tear down the EC2 runner, no matter what
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs: [start-runner, e2e-tests]
    if: ${{ always() }}
    runs-on: ubuntu-24.04
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_KEY }}
          aws-region: "eu-west-1"
      - uses: NillionNetwork/ec2-github-runner@v2.2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instances-ids: ${{ needs.start-runner.outputs.ec2-instances-ids }}


  # Deploy vllm image
  deploy-vllm:
    name: Deploy vllm to ECR
    needs: e2e-tests
    uses: NillionNetwork/devops/.github/workflows/deploy_ecr_and_push.yaml@master
    with:
      image_tag: ${{ github.event_name == 'release' && github.ref_name || github.sha }}
      image_name: "nilai-vllm"
      dockerfile_path: "docker/vllm.Dockerfile"
      docker_context_path: "."
      aws_region: "eu-west-1"
      # any extra build args:
      docker_build_extra_args: ""
      # pass through your JSON arrays of roles/IDs:
      environment_roles: ${{ secrets.ENVIRONMENT_ROLES }}
      deployment_account_ids: ${{ secrets.DEPLOYMENT_ACCOUNT_IDS }}
    secrets:
      NILLION_GITHUB_ACTIONS_APP_ID: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_ID }}
      NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY }}
      SECRETS_MASTER_PASSWORD:       ${{ secrets.SECRETS_MASTER_PASSWORD }}

  # Deploy attestation image
  deploy-attestation:
    name: Deploy attestation to ECR
    needs: e2e-tests
    uses: NillionNetwork/devops/.github/workflows/deploy_ecr_and_push.yaml@master
    with:
      image_tag: ${{ github.event_name == 'release' && github.ref_name || github.sha }}
      image_name: "nilai-attestation"
      dockerfile_path: "docker/attestation.Dockerfile"
      docker_context_path: "."
      aws_region: "eu-west-1"
      docker_build_extra_args: ""
      environment_roles: ${{ secrets.ENVIRONMENT_ROLES }}
      deployment_account_ids: ${{ secrets.DEPLOYMENT_ACCOUNT_IDS }}
    secrets:
      NILLION_GITHUB_ACTIONS_APP_ID: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_ID }}
      NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY }}
      SECRETS_MASTER_PASSWORD:       ${{ secrets.SECRETS_MASTER_PASSWORD }}

  # Deploy nilai-api image
  deploy-api:
    name: Deploy nilai-api to ECR
    needs: e2e-tests
    uses: NillionNetwork/devops/.github/workflows/deploy_ecr_and_push.yaml@master
    with:
      image_tag: ${{ github.event_name == 'release' && github.ref_name || github.sha }}
      image_name: "nilai-api"
      dockerfile_path: "docker/api.Dockerfile"
      docker_context_path: "."
      aws_region: "eu-west-1"
      docker_build_extra_args: ""
      environment_roles: ${{ secrets.ENVIRONMENT_ROLES }}
      deployment_account_ids: ${{ secrets.DEPLOYMENT_ACCOUNT_IDS }}
    secrets:
      NILLION_GITHUB_ACTIONS_APP_ID: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_ID }}
      NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY: ${{ secrets.NILLION_GITHUB_ACTIONS_APP_PRIVATE_KEY }}
      SECRETS_MASTER_PASSWORD:       ${{ secrets.SECRETS_MASTER_PASSWORD }}

services:
  etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - backend_net
  redis:
    image: 'redis:latest'
    networks:
      - frontend_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    env_file:
      - .env
    networks:
      - frontend_net
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.1.0
    restart: unless-stopped
    networks:
      - frontend_net
    user: "$UID:$GID"
    volumes:
      - ${PWD}/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PWD}/prometheus/data:/prometheus/data
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.retention.time=30d --web.enable-admin-api"
    ports:
      - "127.0.0.1:9090:9090"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9090/-/healthy", "-O", "/dev/null", "-o", "/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  node_exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:v1.8.2
    command:
      - '--path.rootfs=/host'
    networks:
      - frontend_net
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9100/", "-O", "/dev/null", "-o", "/dev/null"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  grafana:
    container_name: grafana
    image: 'grafana/grafana:11.5.1'
    restart: unless-stopped
    networks:
      - frontend_net
    user: "$UID:$GID"
    depends_on:
      - prometheus
    volumes:
      - ${PWD}/grafana/runtime-data:/var/lib/grafana
      - ${PWD}/grafana/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ${PWD}/grafana/dashboards/filesystem.yml:/etc/grafana/provisioning/dashboards/filesystem.yml
    env_file:
      - .env
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  api:
    container_name: nilai-api
    build:
      context: .
      dockerfile: docker/api.Dockerfile
      target: nilai
    depends_on:
      etcd:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - frontend_net
      - backend_net
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/health"]
      interval: 30s
      retries: 3
      start_period: 15s
      timeout: 10s

networks:
  # This is the network that is used for the "api" related services
  ## API, user management (postgres), caching (redis) and monitoring (prometheus, grafana)
  frontend_net:
  # This is the network that is used for the model related services:
  ## API, models, and etcd
  backend_net:

volumes:
  postgres_data:
